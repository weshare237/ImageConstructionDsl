/*
 * generated by Xtext 2.26.0
 */
package org.xtext.demo.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.demo.mydsl.demo.DemoPackage;
import org.xtext.demo.mydsl.demo.Go;
import org.xtext.demo.mydsl.demo.Image;
import org.xtext.demo.mydsl.demo.Model;
import org.xtext.demo.mydsl.demo.Procedure;
import org.xtext.demo.mydsl.demo.Suite;
import org.xtext.demo.mydsl.demo.Tl;
import org.xtext.demo.mydsl.demo.Tr;
import org.xtext.demo.mydsl.demo.formal_parameter_list;
import org.xtext.demo.mydsl.services.DemoGrammarAccess;

@SuppressWarnings("all")
public class DemoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DemoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DemoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DemoPackage.GO:
				sequence_Go(context, (Go) semanticObject); 
				return; 
			case DemoPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case DemoPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DemoPackage.PROCEDURE:
				sequence_Procedure(context, (Procedure) semanticObject); 
				return; 
			case DemoPackage.SUITE:
				sequence_Suite(context, (Suite) semanticObject); 
				return; 
			case DemoPackage.TL:
				sequence_Tl(context, (Tl) semanticObject); 
				return; 
			case DemoPackage.TR:
				sequence_Tr(context, (Tr) semanticObject); 
				return; 
			case DemoPackage.FORMAL_PARAMETER_LIST:
				sequence_formal_parameter_list(context, (formal_parameter_list) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Inst returns Go
	 *     Go returns Go
	 *
	 * Constraint:
	 *     nombre=INT
	 * </pre>
	 */
	protected void sequence_Go(ISerializationContext context, Go semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DemoPackage.Literals.INST__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DemoPackage.Literals.INST__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoAccess().getNombreINTTerminalRuleCall_1_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns Image
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (instruction=Inst suite_inst=Suite)
	 * </pre>
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DemoPackage.Literals.IMAGE__INSTRUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DemoPackage.Literals.IMAGE__INSTRUCTION));
			if (transientValues.isValueTransient(semanticObject, DemoPackage.Literals.IMAGE__SUITE_INST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DemoPackage.Literals.IMAGE__SUITE_INST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImageAccess().getInstructionInstParserRuleCall_0_0(), semanticObject.getInstruction());
		feeder.accept(grammarAccess.getImageAccess().getSuite_instSuiteParserRuleCall_1_0(), semanticObject.getSuite_inst());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns Procedure
	 *     Procedure returns Procedure
	 *
	 * Constraint:
	 *     (name=ID parameters=formal_parameter_list? image=Image)
	 * </pre>
	 */
	protected void sequence_Procedure(ISerializationContext context, Procedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Suite returns Suite
	 *
	 * Constraint:
	 *     (instruction=Inst suite_inst=Suite)?
	 * </pre>
	 */
	protected void sequence_Suite(ISerializationContext context, Suite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Inst returns Tl
	 *     Turn returns Tl
	 *     Tl returns Tl
	 *
	 * Constraint:
	 *     nombre=INT
	 * </pre>
	 */
	protected void sequence_Tl(ISerializationContext context, Tl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DemoPackage.Literals.INST__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DemoPackage.Literals.INST__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTlAccess().getNombreINTTerminalRuleCall_1_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Inst returns Tr
	 *     Turn returns Tr
	 *     Tr returns Tr
	 *
	 * Constraint:
	 *     nombre=INT
	 * </pre>
	 */
	protected void sequence_Tr(ISerializationContext context, Tr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DemoPackage.Literals.INST__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DemoPackage.Literals.INST__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrAccess().getNombreINTTerminalRuleCall_1_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     formal_parameter_list returns formal_parameter_list
	 *
	 * Constraint:
	 *     (parameter+=ID parameter+=ID*)
	 * </pre>
	 */
	protected void sequence_formal_parameter_list(ISerializationContext context, formal_parameter_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
