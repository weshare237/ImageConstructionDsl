/*
 * generated by Xtext 2.26.0
 */
package org.xtext.demo.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DemoGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsImageParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//    elements+=Image* ;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Image*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Image
		public RuleCall getElementsImageParserRuleCall_0() { return cElementsImageParserRuleCall_0; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstructionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstructionInstParserRuleCall_0_0 = (RuleCall)cInstructionAssignment_0.eContents().get(0);
		private final Assignment cSuite_instAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSuite_instSuiteParserRuleCall_1_0 = (RuleCall)cSuite_instAssignment_1.eContents().get(0);
		
		//Image:
		//    instruction=Inst suite_inst=Suite;
		@Override public ParserRule getRule() { return rule; }
		
		//instruction=Inst suite_inst=Suite
		public Group getGroup() { return cGroup; }
		
		//instruction=Inst
		public Assignment getInstructionAssignment_0() { return cInstructionAssignment_0; }
		
		//Inst
		public RuleCall getInstructionInstParserRuleCall_0_0() { return cInstructionInstParserRuleCall_0_0; }
		
		//suite_inst=Suite
		public Assignment getSuite_instAssignment_1() { return cSuite_instAssignment_1; }
		
		//Suite
		public RuleCall getSuite_instSuiteParserRuleCall_1_0() { return cSuite_instSuiteParserRuleCall_1_0; }
	}
	public class SuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Suite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstructionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cInstructionInstParserRuleCall_0_0_0 = (RuleCall)cInstructionAssignment_0_0.eContents().get(0);
		private final Assignment cSuite_instAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSuite_instSuiteParserRuleCall_0_1_0 = (RuleCall)cSuite_instAssignment_0_1.eContents().get(0);
		private final Action cSuiteAction_1 = (Action)cAlternatives.eContents().get(1);
		
		//Suite:
		//    instruction=Inst suite_inst=Suite | {Suite};
		@Override public ParserRule getRule() { return rule; }
		
		//instruction=Inst suite_inst=Suite | {Suite}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//instruction=Inst suite_inst=Suite
		public Group getGroup_0() { return cGroup_0; }
		
		//instruction=Inst
		public Assignment getInstructionAssignment_0_0() { return cInstructionAssignment_0_0; }
		
		//Inst
		public RuleCall getInstructionInstParserRuleCall_0_0_0() { return cInstructionInstParserRuleCall_0_0_0; }
		
		//suite_inst=Suite
		public Assignment getSuite_instAssignment_0_1() { return cSuite_instAssignment_0_1; }
		
		//Suite
		public RuleCall getSuite_instSuiteParserRuleCall_0_1_0() { return cSuite_instSuiteParserRuleCall_0_1_0; }
		
		//{Suite}
		public Action getSuiteAction_1() { return cSuiteAction_1; }
	}
	public class InstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Inst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Inst:
		//    Go | Turn;
		@Override public ParserRule getRule() { return rule; }
		
		//Go | Turn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Go
		public RuleCall getGoParserRuleCall_0() { return cGoParserRuleCall_0; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_1() { return cTurnParserRuleCall_1; }
	}
	public class GoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Go");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAvancerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreINTTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Go:
		//    'avancer' nombre=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'avancer' nombre=INT
		public Group getGroup() { return cGroup; }
		
		//'avancer'
		public Keyword getAvancerKeyword_0() { return cAvancerKeyword_0; }
		
		//nombre=INT
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }
		
		//INT
		public RuleCall getNombreINTTerminalRuleCall_1_0() { return cNombreINTTerminalRuleCall_1_0; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Turn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTlParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Turn:
		//    Tl | Tr;
		@Override public ParserRule getRule() { return rule; }
		
		//Tl | Tr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Tl
		public RuleCall getTlParserRuleCall_0() { return cTlParserRuleCall_0; }
		
		//Tr
		public RuleCall getTrParserRuleCall_1() { return cTrParserRuleCall_1; }
	}
	public class TlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Tl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGaucheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreINTTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Tl:
		//    'gauche' nombre=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'gauche' nombre=INT
		public Group getGroup() { return cGroup; }
		
		//'gauche'
		public Keyword getGaucheKeyword_0() { return cGaucheKeyword_0; }
		
		//nombre=INT
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }
		
		//INT
		public RuleCall getNombreINTTerminalRuleCall_1_0() { return cNombreINTTerminalRuleCall_1_0; }
	}
	public class TrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.Demo.Tr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDroitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreINTTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		
		//Tr:
		//    'droit' nombre=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'droit' nombre=INT
		public Group getGroup() { return cGroup; }
		
		//'droit'
		public Keyword getDroitKeyword_0() { return cDroitKeyword_0; }
		
		//nombre=INT
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }
		
		//INT
		public RuleCall getNombreINTTerminalRuleCall_1_0() { return cNombreINTTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ImageElements pImage;
	private final SuiteElements pSuite;
	private final InstElements pInst;
	private final GoElements pGo;
	private final TurnElements pTurn;
	private final TlElements pTl;
	private final TrElements pTr;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DemoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImage = new ImageElements();
		this.pSuite = new SuiteElements();
		this.pInst = new InstElements();
		this.pGo = new GoElements();
		this.pTurn = new TurnElements();
		this.pTl = new TlElements();
		this.pTr = new TrElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.demo.mydsl.Demo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    elements+=Image* ;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Image:
	//    instruction=Inst suite_inst=Suite;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//Suite:
	//    instruction=Inst suite_inst=Suite | {Suite};
	public SuiteElements getSuiteAccess() {
		return pSuite;
	}
	
	public ParserRule getSuiteRule() {
		return getSuiteAccess().getRule();
	}
	
	//Inst:
	//    Go | Turn;
	public InstElements getInstAccess() {
		return pInst;
	}
	
	public ParserRule getInstRule() {
		return getInstAccess().getRule();
	}
	
	//Go:
	//    'avancer' nombre=INT;
	public GoElements getGoAccess() {
		return pGo;
	}
	
	public ParserRule getGoRule() {
		return getGoAccess().getRule();
	}
	
	//Turn:
	//    Tl | Tr;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Tl:
	//    'gauche' nombre=INT;
	public TlElements getTlAccess() {
		return pTl;
	}
	
	public ParserRule getTlRule() {
		return getTlAccess().getRule();
	}
	
	//Tr:
	//    'droit' nombre=INT;
	public TrElements getTrAccess() {
		return pTr;
	}
	
	public ParserRule getTrRule() {
		return getTrAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
